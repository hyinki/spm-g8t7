[
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "Classes.Database",
        "description": "Classes.Database",
        "isExtraImport": true,
        "detail": "Classes.Database",
        "documentation": {}
    },
    {
        "label": "Employees",
        "importPath": "Classes.Employees",
        "description": "Classes.Employees",
        "isExtraImport": true,
        "detail": "Classes.Employees",
        "documentation": {}
    },
    {
        "label": "Employees",
        "importPath": "Classes.Employees",
        "description": "Classes.Employees",
        "isExtraImport": true,
        "detail": "Classes.Employees",
        "documentation": {}
    },
    {
        "label": "Employees",
        "importPath": "Classes.Employees",
        "description": "Classes.Employees",
        "isExtraImport": true,
        "detail": "Classes.Employees",
        "documentation": {}
    },
    {
        "label": "WFHRequests",
        "importPath": "Classes.Wfh_Request",
        "description": "Classes.Wfh_Request",
        "isExtraImport": true,
        "detail": "Classes.Wfh_Request",
        "documentation": {}
    },
    {
        "label": "WFHRequests",
        "importPath": "Classes.Wfh_Request",
        "description": "Classes.Wfh_Request",
        "isExtraImport": true,
        "detail": "Classes.Wfh_Request",
        "documentation": {}
    },
    {
        "label": "WFHRequests",
        "importPath": "Classes.Wfh_Request",
        "description": "Classes.Wfh_Request",
        "isExtraImport": true,
        "detail": "Classes.Wfh_Request",
        "documentation": {}
    },
    {
        "label": "Login",
        "importPath": "Classes.Login",
        "description": "Classes.Login",
        "isExtraImport": true,
        "detail": "Classes.Login",
        "documentation": {}
    },
    {
        "label": "Login",
        "importPath": "Classes.Login",
        "description": "Classes.Login",
        "isExtraImport": true,
        "detail": "Classes.Login",
        "documentation": {}
    },
    {
        "label": "Login",
        "importPath": "Classes.Login",
        "description": "Classes.Login",
        "isExtraImport": true,
        "detail": "Classes.Login",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "unittest;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest;",
        "description": "unittest;",
        "detail": "unittest;",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "flask.Classes.Database",
        "description": "flask.Classes.Database",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "flask.Classes.Database",
        "documentation": {}
    },
    {
        "label": "Employees",
        "kind": 6,
        "importPath": "flask.Classes.Employees",
        "description": "flask.Classes.Employees",
        "peekOfCode": "class Employees(db.Model):\n    __tablename__ = 'employee_list'  # Ensure this matches your actual table name\n    Staff_ID = db.Column(db.Integer, primary_key=True, nullable=False)\n    Staff_FName = db.Column(db.String(50), nullable=False)\n    Staff_LName = db.Column(db.String(50), nullable=False)\n    Dept = db.Column(db.String(50), nullable=False)\n    Position = db.Column(db.String(50), nullable=False)\n    Country = db.Column(db.String(50), nullable=False)\n    Email = db.Column(db.String(50), nullable=False)\n    Reporting_Manager = db.Column(db.Integer,db.ForeignKey('employee_list.Staff_ID'), nullable=True)",
        "detail": "flask.Classes.Employees",
        "documentation": {}
    },
    {
        "label": "Login",
        "kind": 6,
        "importPath": "flask.Classes.Login",
        "description": "flask.Classes.Login",
        "peekOfCode": "class Login:\n    def check_user_password(self, user_id, input_password):\n        # Get the password hash for the user by their ID\n        pword = Employees.check_pword(user_id)\n        if pword:  # Ensure the password exists for the user\n            # Check if the input password matches the stored hash\n            return check_password_hash(pword, input_password)\n        else:\n            return False",
        "detail": "flask.Classes.Login",
        "documentation": {}
    },
    {
        "label": "WFHRequests",
        "kind": 6,
        "importPath": "flask.Classes.Wfh_Request",
        "description": "flask.Classes.Wfh_Request",
        "peekOfCode": "class WFHRequests(db.Model):\n    __tablename__ = 'WFH_Requests'\n    #request_ID = db.Column(db.Integer, primary_key=True)\n    #selected_date = db.Column(db.Date, nullable=False)\n    #day_of_week = db.Column(db.String(50), nullable=False)\n    #Requester_ID = db.Column(db.Integer, nullable=False)\n    #Requester_Supervisor = db.Column(db.Integer, nullable=False)\n    #Request_Status = db.Column(db.Enum('Approved', 'Pending', 'Withdrawn', 'Rejected'), default='Pending')\n    request_ID = db.Column(db.Integer, primary_key=True)\n    start_date = db.Column(db.Date, nullable=False)",
        "detail": "flask.Classes.Wfh_Request",
        "documentation": {}
    },
    {
        "label": "retrieve_employees",
        "kind": 2,
        "importPath": "flask.Classes.retrieve_employees",
        "description": "flask.Classes.retrieve_employees",
        "peekOfCode": "def retrieve_employees(Employees):\n    \"\"\"Retrieve and display all employees.\"\"\"\n    employees_list = Employees.get_all()  # Retrieve all employees from the database\n    return render_template('employees.html', employees=employees_list)  # Render the employees in the template",
        "detail": "flask.Classes.retrieve_employees",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "class User(UserMixin):\n    pass\n@login_manager.user_loader\ndef load_user(user_id):\n    return Employees.query.get(user_id)\n# Route for login\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_route():\n    user_id = request.json.get('username')  # Get the user ID from the JSON body\n    print(user_id)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def load_user(user_id):\n    return Employees.query.get(user_id)\n# Route for login\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_route():\n    user_id = request.json.get('username')  # Get the user ID from the JSON body\n    print(user_id)\n    input_password = request.json.get('password') \n    print(input_password) # Get the password from the JSON body\n    print(\"password is \"+ input_password)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "login_route",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def login_route():\n    user_id = request.json.get('username')  # Get the user ID from the JSON body\n    print(user_id)\n    input_password = request.json.get('password') \n    print(input_password) # Get the password from the JSON body\n    print(\"password is \"+ input_password)\n    # Create an instance of Login to check user credentials\n    login1 = Login()\n    if login1.check_user_password(user_id, input_password):\n        # Optionally return the user's role or other information",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def logout():\n    logout_user()  # Log out the user\n    return redirect(url_for('login_route'))  # Redirect to login page\n@app.route(\"/homepage\")\n@login_required\ndef homepage():\n    staff_name=session['employee_id'] \n    session['name']\n    session['dept'] \n    session['supervisor']",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "homepage",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def homepage():\n    staff_name=session['employee_id'] \n    session['name']\n    session['dept'] \n    session['supervisor']\n    session['email']\n    return render_template(\"homepage.html\")\n# Define a protected route\n@app.route(\"/test_employees\")\n@login_required ",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "retrieve_employees",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def retrieve_employees():\n    \"\"\"Retrieve and display all employees.\"\"\"\n    emp_name=session['name']\n    #employees_list = Employees.get_all()  # Retrieve all employees from the database\n    sql = text(\"SELECT * FROM employee_list where Reporting_Manager =\" + str(session['supervisor']))\n    employees_list = db.session.execute(sql)\n    return render_template('employees.html', employees=employees_list, emp_name=emp_name)  # Render the employees in the template\n@app.route(\"/wfh_request\")\n@login_required\ndef wfh_request():",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "wfh_request",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def wfh_request():\n    emp_name=session['name']\n    emp_sup=session['supervisor']\n    emp_id=session['employee_id']\n    return render_template(\"wfh_request.html\", emp_name=emp_name, emp_sup=emp_sup,emp_id=emp_id)\n@app.route(\"/submit_wfh_request\", methods=[\"POST\"])\ndef submit_wfh_request():\n    data = request.get_json()\n    start_date = data.get('startDate')\n    end_date = data.get('endDate')",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "submit_wfh_request",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def submit_wfh_request():\n    data = request.get_json()\n    start_date = data.get('startDate')\n    end_date = data.get('endDate')\n    requester_id = data.get('userId')\n    requester_supervisor = data.get('supervisor')\n    request_status = \"pending\"  # or however you determine the initial status\n    cloudinary_link = data.get('cloudinary_link')\n    repeating= data.get('repeating')\n    print(\"This is a test\")",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "retrieve_wfh",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def retrieve_wfh():\n    \"\"\"Retrieve and display all wfh.\"\"\"\n    wfh_list = WFHRequests.get_all()  # Retrieve all employees from the database\n    return  render_template('WFH.html',wfh_li=wfh_list) # Render the employees in the \n@app.route(\"/update_wfh_request/<int:request_id>\", methods=[\"GET\", \"POST\"])\n@login_required\ndef update_wfh_request(request_id):\n    \"\"\"Update a WFH request.\"\"\"\n    wfh_request = WFHRequests.get_by_id(request_id)\n    if request.method == \"POST\":",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "update_wfh_request",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def update_wfh_request(request_id):\n    \"\"\"Update a WFH request.\"\"\"\n    wfh_request = WFHRequests.get_by_id(request_id)\n    if request.method == \"POST\":\n        # Update the WFH request with the form data\n        selected_date = request.form['selected_date']\n        day_of_week = request.form['day_of_week']\n        requester_id = request.form['requester_id']\n        requester_supervisor = request.form['requester_supervisor']\n        request_status = request.form['request_status']",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "retrieve_staff_wfh_for_manager",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def retrieve_staff_wfh_for_manager():\n    #sql = text(\"Select * from WFH_requests where Requester_Supervisor = \" + str(session['employee_id']) + \" AND Request_Status = 'Pending'\")\n    #processed = db.session.execute(sql)\n    #turn the object into a list\n    #pending_list = processed.fetchall()\n    #session[\"manager_pending_list\"] = pending_list\n    return redirect(url_for('managerview'))\n@app.route(\"/managerview\")\ndef managerview():\n    sql = text(\"Select * from WFH_requests where Requester_Supervisor = \" + str(session['employee_id']) + \" AND Request_Status = 'Pending'\")",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "managerview",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def managerview():\n    sql = text(\"Select * from WFH_requests where Requester_Supervisor = \" + str(session['employee_id']) + \" AND Request_Status = 'Pending'\")\n    processing = db.session.execute(sql) \n    #list_of_pending_requests = session.get('manager_pending_list', [])   \n    return render_template('managerview.html', requests=processing)\n@app.route(\"/viewownrequests\")\n@login_required\ndef viewownrequests():\n    sql = text(\"Select * from WFH_requests where Requester_ID = \" + str(session['employee_id']))\n    sqldonepog = db.session.execute(sql)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "viewownrequests",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def viewownrequests():\n    sql = text(\"Select * from WFH_requests where Requester_ID = \" + str(session['employee_id']))\n    sqldonepog = db.session.execute(sql)\n    return render_template('viewownrequests.html', ownreq = sqldonepog)\n@app.route(\"/managerview_active\")\n@login_required\ndef managerview_active():\n    sql = text(\"Select * from WFH_requests where Requester_Supervisor = \" + str(session['employee_id']) + \" AND Request_Status = 'Approved'\")\n    sql_processed = db.session.execute(sql)  \n    return render_template('managerview_active.html', active=sql_processed)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "managerview_active",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def managerview_active():\n    sql = text(\"Select * from WFH_requests where Requester_Supervisor = \" + str(session['employee_id']) + \" AND Request_Status = 'Approved'\")\n    sql_processed = db.session.execute(sql)  \n    return render_template('managerview_active.html', active=sql_processed)\n@app.route(\"/org_view\")\n@login_required\ndef org_view():\n    sql = text(\"Select * from WFH_requests where Request_Status = 'Approved'\")\n    sql_processed = db.session.execute(sql)  \n    return render_template('org_view.html', org = sql_processed)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "org_view",
        "kind": 2,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "def org_view():\n    sql = text(\"Select * from WFH_requests where Request_Status = 'Approved'\")\n    sql_processed = db.session.execute(sql)  \n    return render_template('org_view.html', org = sql_processed)\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()  # Create tables if they don't exist\n    app.run(host='0.0.0.0', port=5000, debug=True)",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "app = Flask(__name__)\ncloudinary.config(\n    cloud_name='dofj7bkm3',\n    api_key='844945974877343',\n    api_secret='kxy0mseU1Qsz5G7UX31WElZ1hts'\n)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:root@localhost:8889/spmtest1'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = os.urandom(24)  # Set a random secret key for security\ndb.init_app(app)  # Initialize the db with the Flask app",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:root@localhost:8889/spmtest1'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = os.urandom(24)  # Set a random secret key for security\ndb.init_app(app)  # Initialize the db with the Flask app\nCORS(app, supports_credentials=True, origins=[\"*\"])\n# Initialize Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login_route'  # Redirect to login if not authenticated\n# Define User class",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = os.urandom(24)  # Set a random secret key for security\ndb.init_app(app)  # Initialize the db with the Flask app\nCORS(app, supports_credentials=True, origins=[\"*\"])\n# Initialize Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login_route'  # Redirect to login if not authenticated\n# Define User class\nclass User(UserMixin):",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "app.secret_key = os.urandom(24)  # Set a random secret key for security\ndb.init_app(app)  # Initialize the db with the Flask app\nCORS(app, supports_credentials=True, origins=[\"*\"])\n# Initialize Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login_route'  # Redirect to login if not authenticated\n# Define User class\nclass User(UserMixin):\n    pass",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login_route'  # Redirect to login if not authenticated\n# Define User class\nclass User(UserMixin):\n    pass\n@login_manager.user_loader\ndef load_user(user_id):\n    return Employees.query.get(user_id)\n# Route for login",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "flask.app",
        "description": "flask.app",
        "peekOfCode": "login_manager.login_view = 'login_route'  # Redirect to login if not authenticated\n# Define User class\nclass User(UserMixin):\n    pass\n@login_manager.user_loader\ndef load_user(user_id):\n    return Employees.query.get(user_id)\n# Route for login\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_route():",
        "detail": "flask.app",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "flask.hashing_pword",
        "description": "flask.hashing_pword",
        "peekOfCode": "password = '123456'\nhashed_password = generate_password_hash(password)\nprint(hashed_password)\nunhashed_password=check_password_hash(hashed_password,\"123456\")\nprint(\"Unhashed pword is \",unhashed_password)",
        "detail": "flask.hashing_pword",
        "documentation": {}
    },
    {
        "label": "hashed_password",
        "kind": 5,
        "importPath": "flask.hashing_pword",
        "description": "flask.hashing_pword",
        "peekOfCode": "hashed_password = generate_password_hash(password)\nprint(hashed_password)\nunhashed_password=check_password_hash(hashed_password,\"123456\")\nprint(\"Unhashed pword is \",unhashed_password)",
        "detail": "flask.hashing_pword",
        "documentation": {}
    },
    {
        "label": "TestSQL",
        "kind": 6,
        "importPath": "flask.test_integration",
        "description": "flask.test_integration",
        "peekOfCode": "class TestSQL(unittest.TestCase):\n    pass",
        "detail": "flask.test_integration",
        "documentation": {}
    },
    {
        "label": "TestLogin",
        "kind": 6,
        "importPath": "flask.test_unit",
        "description": "flask.test_unit",
        "peekOfCode": "class TestLogin(unittest.TestCase):\n    pass",
        "detail": "flask.test_unit",
        "documentation": {}
    }
]